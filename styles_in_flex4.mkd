# Styles in Flex 4

## API

*   `ISimpleStyleClient`: minimum requirements to participate in the style
    subsystem.

    ```actionscript
    public interface ISimpleStyleClient
    {
        function get styleName():Object
        function set styleName(value:Object):void

        function styleChanged(styleProp:String):void;
    }
    ```

*   `IStyleClient`: additional requirements when a component stores style values
    locally.

    ```actionscript
    public interface IStyleClient extends ISimpleStyleClient
    {
        // Name of the class of the component instance
        function get className():String;

        // Used by getStyle() to search the style chain.
        // Used to determine whether the style chain has been initialized or not.
        function get inheritingStyles():Object;
        function set inheritingStyles(value:Object):void;
        function get nonInheritingStyles():Object;
        function set nonInheritingStyles(value:Object):void;

        // Holds the inline styles
        function get styleDeclaration():CSSStyleDeclaration;
        function set styleDeclaration(value:CSSStyleDeclaration):void;

        // Queries and modifies the style chain
        function getStyle(styleProp:String):*;
        function setStyle(styleProp:String, newValue:*):void
        function clearStyle(styleProp:String):void;

        function getClassStyleDeclarations():Array; // of CSSStyleDeclaration;
        function notifyStyleChangeInChildren(styleProp:String, recursive:Boolean):void;

        function regenerateStyleCache(recursive:Boolean):void;
        function registerEffects(effects:Array /* of String */):void
    }
    ```

## How does it work?

### Advanced styles

The `isAdvanced()` method in `CSSStyleDeclaration` determines whether the
declaration uses Flex 4 advanced CSS features. It is true if:

*   It has a selector with an ancestor (descendant selector.)
*   It has a subject (non-global selector.)
*   It has at least a selector that is not a class selector (pseudo-selector or
    ID selector.)

### CSSStyleDeclaration#defaultFactory vs. CSSStyleDeclaration#factory

TODO

## Performance considerations

### Selector matching

A `CSSSelector` will match a `IStyleClient` if:

* If the selector has an ancestor:
    * First match all of its conditions and return `false` as soon as a
    condition does not match.
    * Walk the component's display list hierarchy and try to find a
    matching parent for the ancestor condition. Return `false` if it
    does not find one. This is recursive, as the ancestor selector
    might have other selectors. This is potentially more expensive
    than matching the conditions.
* If the selector does not have an ancestor:
    * Return `false` if the subject does not match.
    * Try to match all of the conditions and return `false` as soon as a
    condition does not match. This is potentially more expensive than
    matching a single component to a type.

CSS condition matching is done by
`CSSCondition#matchesStyleClient(component)`. This matches if:

*   The condition's kind is `CSSConditionKind.CLASS` and its value matches one
    of the values in the `styleName` property of the component. This is a
    simple string split on whitespace and match against the resulting
    elements.
*   The condition's kind is `CSSConditionKind.ID` and the component ID matches
    its value.
*   The condition's kind is `CSSConditionKind.PSEUDO` and its `currentState`
    matches the condition's value. For `SkinnableComponent` the skin state is
    used instead.

Matching a component to a type is done by
`StyleProtoChain#matchesCSSType(component, type)`. This matches if:

*   The ordered list of types returned by
    `StyleProtoChain#getTypeHierarchy(component)` contains the CSS type. This
    method walks up the inheritance tree for the component until it hits a
    "stop class" (`UIComponent` is one of them). The style manager for the 
    component keeps a cache of previously looked up hierarchies.
