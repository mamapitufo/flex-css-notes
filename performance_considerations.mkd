# Performance considerations

## Reparenting vs. hiding components

Adding a child to a component regenerates the style cache for that component
and all of its children.

Prefer setting the `visible` and `includeInLayout` properties instead of
adding and removing children.

This should be considered when using `includeIn` and `excludeFrom` in states.

## Style bindings

*   Binding to `getStyle('foo')` is not recommended because of the poor
    performance of the binding mechanism. For complex skins you should set the
    styles and properties in `UIComponent#styleChange(styleProp)` or the
    `UIComponent` lifecycle methods.

## 'getStyle()' calls are cheap

*   Calling `getStyle('foo')` is just a couple of object property lookups, so
    generally you don't want to cache them. Styles are looked up in
    `UIComponent#inheritingStyles` and `UIComponent#nonInheritingStyles`.

*   There is an initial cost of building the inheriting styles cache for each
    `IStyleManager`.

## Advanced styles

Advanced CSS matching mechanisms are more expensive, so there are checks in
the framework to skip them.

The `isAdvanced()` method in `CSSStyleDeclaration` determines whether or not
the declaration uses Flex 4 advanced CSS features. It is true if:

*   It has a selector with an ancestor (descendant selector.)
*   It has a subject (non-global selector.)
*   It has at least a selector that is not a class selector (pseudo-selector or
    ID selector.)

## Selector matching

A `CSSSelector` will match a `IStyleClient` if:

* If the selector has an ancestor:
    * First match all of its conditions and return `false` as soon as a
    condition does not match.
    * Walk the component's display list hierarchy and try to find a
    matching parent for the ancestor condition. Return `false` if it
    does not find one. This is recursive, as the ancestor selector
    might have other selectors. This is potentially more expensive
    than matching the conditions.

* If the selector does not have an ancestor:
    * Return `false` if the subject does not match.
    * Try to match all of the conditions and return `false` as soon as a
    condition does not match. This is potentially more expensive than
    matching a single component to a type.

CSS condition matching is done by
`CSSCondition#matchesStyleClient(component)`. This matches if:

*   The condition's kind is `CSSConditionKind.CLASS` and its value matches one
    of the values in the `styleName` property of the component. This is a
    simple string split on whitespace and match against the resulting
    elements.

*   The condition's kind is `CSSConditionKind.ID` and the component ID matches
    its value.

*   The condition's kind is `CSSConditionKind.PSEUDO` and its `currentState`
    matches the condition's value. For `SkinnableComponent` the skin state is
    used instead.

Matching a component to a type is done by
`StyleProtoChain#matchesCSSType(component, type)`. This matches if:

*   The ordered list of types returned by
    `StyleProtoChain#getTypeHierarchy(component)` contains the CSS type. This
    method walks up the inheritance tree for the component until it hits a
    "stop class" (`UIComponent` is one of them). The style manager for the 
    component keeps a cache of previously looked up hierarchies.

# Tips

## Checking whether or not a style has been set

*   `getStyle('foo')` returns `undefined` if the `foo` style has not been set
    anywhere in the style lookup chain.

        if (getStyle('color') === undefined)
        {
            // 'color' style was not set
        }
        else
        {
            // a value of 0 is valid for colours, so a boolean check won't work.
        }

