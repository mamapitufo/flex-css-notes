# Flex3 vs. Flex4, Advanced CSS

## Available selectors in Flex3

1.  Type selectors. They are applied to every instance of the class and any
    subclasses.

    ```css
    Button {
        color: #3C3C3C;
    }
    ```

2.  Class selectors. They are applied to every `IStyleClient` that uses the
    selector in its `styleName` property. Even though you can use a type
    selector with a class selector, they are ignored in Flex3.

    ```css
    .h1 {
        font-size: 24px;
    }

    /* The style is applied to every IStyleClient that uses the "error" styleName, not only Label instances. */
    Label.error {
        color: red;
    }
    ```

3.  `global` selector. This is a special type selector that is applied to
    every `IStyleClient` in the application.

    ```css
    global {
        color: black;
        font-size: 12px;
    }
    ```

## Advanced CSS in Flex4

Flex4 introduces some extensions to the existing CSS selectors. To solve the
problem of type selectors with both `mx` and `spark` components that have the
same name, Spark also introduced namespaces in CSS.

1.  Namespaces. When the `mxmlc` compiler processes the style definitions it
    uses the namespace to generate type selectors with the fully qualified
    class name.

    ```css
    @namespace s "library://ns.adobe.com/flex/spark";
    @namespace mx "library://ns.adobe.com/flex/mx";

    /* This will become the type selector "spark.components.Button" */
    s|Button {
        font-weight: bold;
    }

    /* This will become the type selector "mx.controls.Button" */
    mx|Button {
        font-weight: bold;
    }
    ```

2.  Class selectors. In Flex4, class selectors can be used to qualify a type
    selector.

    ```css
    s|Button.custom {
        skin-class: ClassReference("com.example.custom.skin.ButtonSkin;
    }
    ```

    In Flex4 you can also specify more than one class selector in the
    `styleName` property of a component. All of the style declarations
    specified will be applied to the component following selector specificity.

    ```html
    <s:Button label="Submit" styleName="big custom"/>
    ```

    Finally, you can use a class selector to qualify another class selector.
    The resulting style declaration will be applied to the component only when
    all of the class selectors are used in the `styleName` property.

    ````css
    /* This declaration will only be applied to components specifying *both* 'red' and 'big' in their 'styleName' property */
    .red.big {
        color: red;
        font-size: 18;
    }
    ```

3.  ID selectors. These declarations will only be applied to the components
    that have an 'id' property that is the same as the selector.

    ```css
    #submitButton {
        right: 0;
        bottom: 0;
    }
    ```

4.  Descendant selectors. These selectors will match components depending on
    their relationship in the display list.

    ```css
    s|Button s|Label {
        text-decoration: bold;
    }
    ```

5.  Pseudo selectors, used to apply styles to a component when they are in a
    specified state.

    ```css
    s|Button {
        color: #C9C9C9;
    }

    s|Button:upAndSelected {
        color: white;
    }

    s|Button:down {
        color: #3C3C3C;
    }
    ```

# Precedence order

1. `global` selector.
2. Type selectors.
3. Class selectors.
4. Inline styles.
